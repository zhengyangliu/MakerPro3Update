{	"extensionName": "MegaPiPro",
	"extensionPort": 0,
	"sort":2,
	"firmware":"1.2.103",
	"javascriptURL":"js/MegaPiPro.js",
	"isMakeBlockBoard":true,
	"blockSpecs": [
		["h","MegaPi Pro Program","runArduino",{"src":"orion","inc":"#include <MeMegaPiPro.h>\n","def":"MeEncoderOnBoard Encoder_1(SLOT1);\nMeEncoderOnBoard Encoder_2(SLOT2);\nMeEncoderOnBoard Encoder_3(SLOT3);\nMeEncoderOnBoard Encoder_4(SLOT4);\n--separator--void isr_process_encoder1(void)\n{\nif(digitalRead(Encoder_1.getPortB()) == 0){\nEncoder_1.pulsePosMinus();\n}else{\nEncoder_1.pulsePosPlus();\n}\n}\n\nvoid isr_process_encoder2(void)\n{\nif(digitalRead(Encoder_2.getPortB()) == 0){\nEncoder_2.pulsePosMinus();\n}else{\nEncoder_2.pulsePosPlus();\n}\n}\n\nvoid isr_process_encoder3(void)\n{\nif(digitalRead(Encoder_3.getPortB()) == 0){\nEncoder_3.pulsePosMinus();\n}else{\nEncoder_3.pulsePosPlus();\n}\n}\n\nvoid isr_process_encoder4(void)\n{\nif(digitalRead(Encoder_4.getPortB()) == 0){\nEncoder_4.pulsePosMinus();\n}else{\nEncoder_4.pulsePosPlus();\n}\n}\n","setup":"TCCR1A = _BV(WGM10);//PIN12\nTCCR1B = _BV(CS11) | _BV(CS10) | _BV(WGM12);\n\nTCCR2A = _BV(WGM21) | _BV(WGM20);//PIN8\nTCCR2B = _BV(CS22);\n\nTCCR3A = _BV(WGM30);//PIN9\nTCCR3B = _BV(CS31) | _BV(CS30) | _BV(WGM32);\n\nTCCR4A = _BV(WGM40);//PIN5\nTCCR4B = _BV(CS41) | _BV(CS40) | _BV(WGM42);\n\n","loop":""}],
		
		
		["w", "%m.direction at speed %d.motorvalue","runBot", "run forward", 0,
		{"encode":"{d0}{s1}","setup":"attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);\nattachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);\n","inc":"","def":"--separator--void move(int direction, int speed)\n{\nint leftSpeed = 0;\nint rightSpeed = 0;\nif(direction == 1){\nleftSpeed = -speed;\nrightSpeed = speed;\n}else if(direction == 2){\nleftSpeed = speed;\nrightSpeed = -speed;\n}else if(direction == 3){\nleftSpeed = speed;\nrightSpeed = speed;\n}else if(direction == 4){\nleftSpeed = -speed;\nrightSpeed = -speed;\n}\nEncoder_1.setTarPWM(rightSpeed);\nEncoder_2.setTarPWM(leftSpeed);\n}\n","work":"move({0},{1});\n","loop":"Encoder_1.loop();\nEncoder_2.loop();\n"}],
		
		["w", "%m.direction %n degrees at the speed of%d.motorDegreesvalue rpm","runDegreesBot", "run forward", 1000,100,
		{"encode":"{d0}{s1}","setup":"attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);\nattachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);\nEncoder_1.setPulse(8);\nEncoder_2.setPulse(8);\nEncoder_1.setRatio(46.67);\nEncoder_2.setRatio(46.67);\nEncoder_1.setPosPid(1.8,0,1.2);\nEncoder_2.setPosPid(1.8,0,1.2);\nEncoder_1.setSpeedPid(0.18,0,0);\nEncoder_2.setSpeedPid(0.18,0,0);\n","inc":"","def":"--separator--void moveDegrees(int direction,long degrees, int speed_temp)\n{\nspeed_temp = abs(speed_temp);\nif(direction == 1)\n{\nEncoder_1.move(degrees,(float)speed_temp);\nEncoder_2.move(-degrees,(float)speed_temp);\n}\nelse if(direction == 2)\n{\nEncoder_1.move(-degrees,(float)speed_temp);\nEncoder_2.move(degrees,(float)speed_temp);\n}\nelse if(direction == 3)\n{\nEncoder_1.move(degrees,(float)speed_temp);\nEncoder_2.move(degrees,(float)speed_temp);\n}\nelse if(direction == 4)\n{\nEncoder_1.move(-degrees,(float)speed_temp);\nEncoder_2.move(-degrees,(float)speed_temp);\n}\n}\n","work":"moveDegrees({0},{1},{2});\n","loop":"Encoder_1.loop();\nEncoder_2.loop();\n"}],
		
		["w", "set motor%d.motorPort speed %d.motorvalue","runMotor", "Port1A", 0,
		{"encode":"{d0}{s1}","setup":"","inc":"","def":"MeMegaPiDCMotor motor_{0}({0});\n","work":"motor_{0}.run({1});\n","loop":""}],
		
		["w", "set motor%d.newMotorPort speed %d.motorvalue","runNewMotor", "M9", 0,
		{"encode":"{d0}{s1}","setup":"","inc":"","def":"MeDCMotor dcfourmotor_{0}({0});\n","work":"dcfourmotor_{0}.run({1});\n","loop":""}],
		
		["w", "set stepper motor%d.exMotorPort speed %d.stepperSpeed distance %n","runStepperMotor", "Port1", 3000, 1000,
		{"encode":"{d0}{s1}{s2}","setup":"stepper_{0}.setMicroStep(16);\nstepper_{0}.enableOutputs();\n","inc":"","def":"MeStepperOnBoard stepper_{0}({0});\n","work":"stepper_{0}.move({2});\nstepper_{0}.setMaxSpeed({1});\nstepper_{0}.setSpeed({1});\n","loop":"stepper_{0}.runSpeedToPosition();\n"}],
		
		["w", "set encoder motor%d.exMotorPort power to %d.motorvalue","runEncoderMotorPWM", "Port1", 100,
		{"encode":"{d0}{s1}{s2}","setup":"attachInterrupt(Encoder_{0}.getIntNum(), isr_process_encoder{0}, RISING);\n","inc":"","def":"","work":"Encoder_{0}.setTarPWM({1});\n","loop":"Encoder_{0}.loop();\n"}],
		
		["w", "set encoder motor%d.exMotorPort speed %n rpm","runEncoderMotor", "Port1", 180,
		{"encode":"{d0}{s1}{s2}","setup":"attachInterrupt(Encoder_{0}.getIntNum(), isr_process_encoder{0}, RISING);\nEncoder_{0}.setPulse(8);\nEncoder_{0}.setRatio(46.67);\nEncoder_{0}.setPosPid(1.8,0,1.2);\nEncoder_{0}.setSpeedPid(0.18,0,0);\n","inc":"","def":"","work":"Encoder_{0}.runSpeed({1});\n","loop":"Encoder_{0}.loop();\n"}],
		
		["w", "set encoder motor%d.exMotorPort rotate %n degrees at speed %n rpm","runEncoderMotorRotate", "Port1",1000, 180,
		{"encode":"{d0}{s1}{s2}","setup":"attachInterrupt(Encoder_{0}.getIntNum(), isr_process_encoder{0}, RISING);\nEncoder_{0}.setPulse(8);\nEncoder_{0}.setRatio(46.67);\nEncoder_{0}.setPosPid(1.8,0,1.2);\nEncoder_{0}.setSpeedPid(0.18,0,0);\n","inc":"","def":"","work":"Encoder_{0}.move({1},abs({2}));\n","loop":"Encoder_{0}.loop();\n"}],
		
		["w", "set superpower encoder motor DIP Switch %d.i2cAddr %d.i2cSlot power to %d.motorvalue","runI2CMotorPower", "LLL","M1", 0,
		{"setup":"superMotor_{0}_{1}.begin();\n","inc":"","def":"MeEncoderNew superMotor_{0}_{1}(0x09+{0},{1});\n","work":"superMotor_{0}_{1}.setPWM({2});\n","loop":""}],
		
		["w", "set superpower encoder motor DIP Switch %d.i2cAddr %d.i2cSlot speed of %n rpm","runI2CMotorSpeed", "LLL","M1", 180,
		{"setup":"superMotor_{0}_{1}.begin();\n","inc":"","def":"MeEncoderNew superMotor_{0}_{1}(0x09+{0},{1});\n","work":"superMotor_{0}_{1}.runSpeed({2});\n","loop":""}],
		
		["w", "set superpower encoder motor DIP Switch %d.i2cAddr %d.i2cSlot rotate %n degrees at speed of %n rpm","runI2CMotorMoveTo", "LLL","M1", 1000,180,
		{"setup":"superMotor_{0}_{1}.begin();\n","inc":"","def":"MeEncoderNew superMotor_{0}_{1}(0x09+{0},{1});\n","work":"superMotor_{0}_{1}.move({2}, {3});\n","loop":""}],
		
		["w", "set 7-segments display%d.bluePorts number %n","runSevseg", "Port6", 100,
		{"encode":"{d0}{f1}","setup":"","inc":"","def":"Me7SegmentDisplay seg7_{0}({0});\n","work":"seg7_{0}.display((float){1});\n","loop":""}],
		
		["w", "set led %d.lport %d.index red%d.value green%d.value blue%d.value","runLed", "Port6","all",0,0,0,
		{"encode":"{d0}{d1}{d2}{d3}{d4}","setup":"","inc":"","def":"MeRGBLed rgbled_{0}({0}, 4);\n","work":"rgbled_{0}.setColor({1},{2},{3},{4});\nrgbled_{0}.show();\n","loop":""}],
		
		["w", "set led strip %d.normalPort %d.slot %d.index2 red%d.value green%d.value blue%d.value","runLedStrip", "Port6","Slot2","all",0,0,0,
		{"encode":"{d0}{d1}{d2}{d3}{d4}","setup":"","inc":"","def":"MeRGBLed rgbled_{0}_{1}({0}, {1}, 32);\n","work":"rgbled_{0}_{1}.setColor({2},{3},{4},{5});\nrgbled_{0}_{1}.show();\n","loop":""}],
		
		["w", "show face %d.normalPort number:%n","showNumber", "Port6", 0,
		{"encode":"{s0}","setup":"ledMtx_{0}.setColorIndex(1);\nledMtx_{0}.setBrightness(6);\n","inc":"","def":"MeLEDMatrix ledMtx_{0}({0});\n","work":"ledMtx_{0}.showNum({1},3);\n","loop":""}],
	
		["w", "show face %d.normalPort x:%n y:%n characters:%s","showCharacters", "Port6", 0,0,"Hi",
		{"encode":"{s0}","setup":"ledMtx_{0}.setColorIndex(1);\nledMtx_{0}.setBrightness(6);\n","inc":"","def":"MeLEDMatrix ledMtx_{0}({0});\n","work":"ledMtx_{0}.drawStr({1},{2}+7,{3});\n","loop":""}],
		
		["w", "show time %d.normalPort hour:%n %m.points min:%n","showTime", "Port6", 10,":",20,
		{"encode":"{s0}","setup":"ledMtx_{0}.setColorIndex(1);\nledMtx_{0}.setBrightness(6);\n","inc":"","def":"MeLEDMatrix ledMtx_{0}({0});\n","work":"ledMtx_{0}.showClock({1},{3},strcmp({2},\":\")==0);\n","loop":""}],
		
		["w", "show drawing %d.normalPort x:%n y:%n draw:%m.drawFace","showDraw", "Port6", 0,0,"        ",
		{"encode":"{s0}","setup":"ledMtx_{0}.setColorIndex(1);\nledMtx_{0}.setBrightness(6);\n","inc":"","def":"MeLEDMatrix ledMtx_{0}({0});\nunsigned char drawBuffer[16];\nunsigned char *drawTemp;\n","work":"drawTemp = new unsigned char[16]{{3}};\nmemcpy(drawBuffer,drawTemp,16);\nfree(drawTemp);\nledMtx_{0}.drawBitmap({1},{2},16,drawBuffer);\n","loop":""}],
		
		["w", "set light sensor %d.blackPorts led as %d.switch","runLightsensor", "Port6", "On",
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MeLightSensor lightsensor_{0}({0});\n","work":"lightsensor_{0}.dWrite1({1});\n","loop":""}],
		
		["w", "set camera shutter %d.bluePorts as %d.shutter","runShutter","Port6", "Press",
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MeShutter shutter_{0}({0});\n","work":"shutter_{0}.setState({1});\n","loop":""}],
		
		["w", "Brushless DC Motor %d.brushPorts unlock","initBrushless","Port1",
		{"setup":"","inc":"","def":"MeMegaPiProESCMotor bldcmotor_{0}({0});\n","work":"bldcmotor_{0}.init();\n","loop":""}],
		
		["w", "Brushless DC Motor %d.brushPorts power %d.brushPower %","runBrushless","Port1",0,
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MeMegaPiProESCMotor bldcmotor_{0}({0});\n","work":"bldcmotor_{0}.run(abs({1}));\n","loop":""}],
		
		["w", "set mini fan %d.fanPorts blow %d.fan","runFan","Port6", "clockwise",
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MePort dc130({0});\n--separator--void dc130_run( uint8_t port, int8_t direction) \n{\n  pinMode(dc130.pin1(),OUTPUT);\n  pinMode(dc130.pin2(),OUTPUT);\n  if( direction > 0)\n  {\n    digitalWrite(dc130.pin2(),0);\n    digitalWrite(dc130.pin1(),1);\n  }\n  else if( direction < 0)\n  {\n    digitalWrite(dc130.pin1(),0);\n    digitalWrite(dc130.pin2(),1);\n  }\n  else\n  {\n    digitalWrite(dc130.pin1(),0);\n    digitalWrite(dc130.pin2(),0);\n  }\n}\n","work":"dc130_run({0},{1});\n","loop":""}],
		
		["-"],
		["B", "Game is on the Automatic stage?", "isAutoMode",
		{"encode":"","setup":"","inc":"","def":"--separator--uint8_t value = 0;\nint getPlayStatus(void)\n{\nchar count=0;\nuint8_t new_value;\nuint8_t bit = _BV(3);\nuint8_t port= 10;\nvolatile uint8_t *reg, *out;\nreg = portModeRegister(port);\nout = portOutputRegister(port);\nuint8_t oldSREG = SREG;\ncli();\n*reg &= ~bit;\n*out &= ~bit;\nSREG = oldSREG;\nnew_value = (*portInputRegister(port) & bit);\nwhile (value != new_value)//filter\n{\ncount++;\nif (count >= 5)\n{\nvalue = new_value;\nif (new_value)\n{\nreturn HIGH; //自动赛阶段\n}\nelse\n{\nreturn LOW; //手动赛阶段\n}\n}\ndelay(2);\nnew_value = (*portInputRegister(port) & bit);\n}\nvalue = new_value;\nif (new_value)\n{\nreturn HIGH; //自动赛阶段\n}\nelse\n{\nreturn LOW; //手动赛阶段\n}\n}\n","work":"getPlayStatus()","loop":""}],
		["-"],
		["R", "encoder motor %d.exMotorPort speed/rpm", "getEncoderSpeedValue","Port1",
		{"encode":"{d0}","setup":"","inc":"","def":"","work":"Encoder_{0}.getCurrentSpeed()","loop":""}],
		
		["R", "encoder motor %d.exMotorPort position/degrees", "getEncoderPosValue","Port1",
		{"encode":"{d0}","setup":"","inc":"","def":"","work":"Encoder_{0}.getCurPos()","loop":""}],
		
		["R", "superpower encoder motor DIP Switch %d.i2cAddr %d.i2cSlot speed/rpm","getI2CMotorSpeed", "LLL","M1",
		{"setup":"","inc":"","def":"MeEncoderNew superMotor_{0}_{1}(0x09+{0},{1});\n","work":"superMotor_{0}_{1}.getCurrentSpeed()","loop":""}],
		
		["R", "superpower encoder motor DIP Switch %d.i2cAddr %d.i2cSlot position/degrees","getI2CMotorPosition", "LLL","M1",
		{"setup":"","inc":"","def":"MeEncoderNew superMotor_{0}_{1}(0x09+{0},{1});\n","work":"superMotor_{0}_{1}.getCurrentPosition()","loop":""}],
		
		["R", "ultrasonic sensor %d.whitePorts distance","getUltrasonic","Port7",
		{"encode":"{d0}","setup":"","inc":"","def":"MeUltrasonicSensor ultrasonic_{0}({0});\n","work":"ultrasonic_{0}.distanceCm()","loop":""}],
		
		["R", "line follower %d.bluePorts","getLinefollower","Port8",
		{"encode":"{d0}","setup":"","inc":"","def":"MeLineFollower linefollower_{0}({0});\n","work":"linefollower_{0}.readSensors()","loop":""}],
		
		["R", "light sensor %d.laport","getLightsensor","Port6",
		{"encode":"{d0}","setup":"","inc":"","def":"MeLightSensor lightsensor_{0}({0});\n","work":"lightsensor_{0}.read()","loop":""}],
		
		["R", "joystick %d.blackPorts %d.Axis","getJoystick","Port6","X-Axis",
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MeJoystick joystick_{0}({0});\n","work":"joystick_{0}.read({1})","loop":""}],
		
		["R", "potentiometer %d.blackPorts","getPotentiometer","Port6",
		{"encode":"{d0}","setup":"","inc":"","def":"MePotentiometer potentiometer_{0}({0});\n","work":"potentiometer_{0}.read()","loop":""}],
		
		["R", "sound sensor %d.soundPort","getSoundsensor","Port6",
		{"encode":"{d0}","setup":"","inc":"","def":"MeSoundSensor soundsensor_{0}({0});\n","work":"soundsensor_{0}.strength()","loop":""}],
		
		["R", "infrared receiver %d.infraredPorts (Arduino Mode Only)","getInfrared","Port7",
		{"encode":"{d0}","setup":"ir_{0}.begin();\n","inc":"","def":"MeInfraredReceiver ir_{0}({0});\n","work":"ir_{0}.getCode()","loop":"ir_{0}.loop();\n"}],
		
		["B", "limit switch %d.normalPort %d.slot","getLimitswitch","Port6","Slot1",
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MeLimitSwitch sw_{0}_{1}({0},{1});\n","work":"sw_{0}_{1}.touched()","loop":""}],
		
		["B", "pir motion sensor %d.bluePorts","getPirmotion","Port6",
		{"encode":"{d0}","setup":"","inc":"","def":"MePIRMotionSensor pir_{0}({0});\n","work":"pir_{0}.isHumanDetected()","loop":""}],
		
		["R", "temperature %d.normalPort%d.slot °C","getTemperature","Port6","Slot1",
		{"encode":"{d0}{d1}","setup":"","inc":"","def":"MeTemperature temperature_{0}_{1}({0},{1});\n","work":"temperature_{0}_{1}.temperature()","loop":""}],
		
		["R", "3-axis gyro %d.GyroAxis angle","getGyroExternal", "X-Axis",
		{"encode":"{d0}","setup":"gyro_1.begin();\n","inc":"","def":"MeGyro gyro_1;\n","work":"gyro_1.getAngle({0})","loop":"gyro_1.update();\n"}],
		
		["R", "humiture sensor %d.normalPort %d.humiture", "getHumiture", "Port6", "humidity", {"encode":"", "setup":"", "inc":"", "def":"MeHumiture humiture_{0}({0});\n", "work":"humiture_{0}.getValue({1})", "loop":"humiture_{0}.update();\n"}],
		["R", "flame sensor %d.blackPorts", "getFlame", "Port6", {"encode":"", "setup":"", "inc":"", "def":"MeFlameSensor flameSensor_{0}({0});\n", "work":"flameSensor_{0}.readAnalog()", "loop":""}],
		["R", "gas sensor %d.blackPorts", "getGas", "Port6", {"encode":"", "setup":"", "inc":"", "def":"MeGasSensor gasSensor_{0}({0});\n", "work":"gasSensor_{0}.readAnalog()", "loop":""}],
		["R", "compass sensor %d.whitePorts", "gatCompass", "Port6",{"encode":"", "setup":"compass_{0}.begin();\n", "inc":"", "def":"MeCompass compass_{0}({0});\n", "work":"compass_{0}.getAngle()", "loop":""}],
		
		["R", "color sensor %d.whitePorts %d.colorOption value", "getColorValue", "Port6","R",{"encode":"", "setup":"colorsensor_{0}.SensorInit();\n", "inc":"", "def":"MeColorSensor colorsensor_{0}({0});\n--separator--uint16_t getSingleColorValue(MeColorSensor colorSensor,uint8_t colorType)\n{\n  long rgbcode = 0;\n  colorSensor.ColorDataRead();\n  if(colorType < 3)\n  {\n     rgbcode = colorSensor.ReturnColorCode();\n     switch(colorType)\n     {\n        case 0: return (uint8_t)(rgbcode>>16);\n        case 1: return (uint8_t)(rgbcode>>8);\n        case 2: return (uint8_t)rgbcode;\n        default: return 0;\n     }\n  }\n  else if(colorType==3)\n  {\n      return colorSensor.ReturnGrayscale();\n  }\n  else\n  {\n      return 0;\n  }\n}\n", "work":"getSingleColorValue(colorsensor_{0},{1})", "loop":""}],
		
		["B", "color sensor %d.whitePorts detected %d.colorType", "getColorType", "Port6","white",{"encode":"", "setup":"colorsensor_{0}.SensorInit();\n", "inc":"", "def":"MeColorSensor colorsensor_{0}({0});\n--separator--uint8_t detectedColor(MeColorSensor colorSensor,uint8_t colorType)\n{\n	if(colorType==colorSensor.Returnresult())\n	{\n	return 1;\n	}\n	return 0;\n}\n", "work":"detectedColor(colorsensor_{0},{1})", "loop":""}],

		["B", "touch sensor %d.bluePorts","getTouchSensor","Port6",{"encode":"{d0}","setup":"","inc":"","def":"MeTouchSensor touchSensor_{0}({0});\n","work":"touchSensor_{0}.touched()","loop":""}],
		["B", "button %d.blackPorts %m.button_key pressed","getButton","Port6","key1",{"encode":"{d0}","setup":"","inc":"","def":"Me4Button buttonSensor_{0}({0});\n","work":"(buttonSensor_{0}.pressed()=={1})","loop":"buttonSensor_{0}.pressed();"}],
		["-"],
		
		["R", "timer","getTimer", "0",
		{"encode":"{n0}","setup":"","inc":"","def":"double currentTime = 0;\ndouble lastTime = 0;\n--separator--double getLastTime(){\n\treturn currentTime = millis()/1000.0 - lastTime;\n}\n","work":"getLastTime()","loop":""}],
		
		["w", "reset timer","resetTimer", "0",
		{"encode":"{n0}","setup":"","inc":"","def":"double currentTime = 0;\ndouble lastTime = 0;\n","work":"lastTime = millis()/1000.0;\n","loop":""}]
		
        ],
    "menus": {
    	"fanPorts":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
    	"yellowPorts":["Port6","Port7","Port8"],
    	"bluePorts":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
	"infraredPorts":["Port7","Port8","Port9","Port10"],
    	"grayPorts":["Port5"],
    	"whitePorts":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
    	"blackPorts":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
    	"laport":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
    	"soundPort":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
		"normalPort":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
		"lport":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
		"points":[":",""],
		"motorPort":["Port1A","Port1B","Port2A","Port2B","Port3A","Port3B","Port4A","Port4B"],
		"stepMotorPort":["Port1","Port2","Port3","Port4"],
		"exMotorPort":["Port1","Port2","Port3","Port4"],
		"servoPort":["Port6","Port7","Port8","Port9","Port10","Port11","Port12"],
		"servoSlot":["A6","A7","A8","A9","A10","A11","A12","A13","A14","A15"],
		"slot":["Slot1","Slot2"],
		"device":["Ultrasonic","Line Finder","Light Sensor","Sound Sensor","Joystick","Button","Potentiometer"],
		"exdevice":["LimitSwitch","Temperature"],
		"encoderValue":["speed", "position"],
		"mode":["Input","Output"],
		"type":["Digital","Analog"],
		"Axis":["X-Axis","Y-Axis"],
		"GyroAxis":["X-Axis","Y-Axis","Z-Axis"],
		"gyroType":["gyro on board", "gyro external"],
		"digital":["LOW","HIGH"],
		"switch":["Off","On"],
		"shutter":["Press","Release","Focus On","Focus Off"],
		"index":["all",1,2,3,4],
		"index2":["all",1,15,30],
		"note":["C2","D2","E2","F2","G2","A2","B2","C3","D3","E3","F3","G3","A3","B3","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5","C6","D6","E6","F6","G6","A6","B6","C7","D7","E7","F7","G7","A7","B7","C8","D8"],
		"servovalue":[0,45,90,135,180],
		"direction":["run forward","run backward","turn right","turn left"],
		"motorvalue":[255,100,50,0,-50,-100,-255],
		"motorDegreesvalue":[200,100,50,0],
		"value":[0,20,60,150,255],
		"encodeType":["time","turns"],
		"stepType":["time","steps"],
		"stepperSpeed":[100,500,1000,1500,3000],
		"encoderSpeed":[0,50,100,150,300],
		"button_key":["key1","key2","key3","key4"],
		"humiture":["humidity","temperature"],
		"aurigaMode":["bluetooth mode", "ultrasonic mode", "balance mode", "IR mode", "line follower mode"],
		"fan":["clockwise", "counter-clockwise", "stop"],
		"colorOption":["R","G","B"],
		"colorType":["white","red","yellow","green","blue","black"],
		"brushPorts":["Port1","Port2","Port3","Port4"],
		"brushPower":[0,20,40,60,80,100],
		"newMotorPort":["M9","M10","M11","M12"],
		"i2cAddr":["LLL","LLH","LHL","LHH","HLL","HLH","HHL","HHH"],
		"i2cSlot":["M1","M2"]
        },
		"values":{
		"bluetooth mode":0,
		"ultrasonic mode":1,
		"balance mode":2,
		"IR mode":3,
		"line follower mode":4,
		"gyro on board":1,
		"gyro external":0,
		"run forward":1,
		"run backward":2,
		"turn left":3,
		"turn right":4,
		"speed":2,
		"position":1,
		"all":0,
		"On":1,
		"Off":0,
		"LOW":0,
		"HIGH":1,
		"Press":1,
		"Release":0,
		"Focus On":3,
		"Focus Off":2,
		"Slot1":1,
		"Slot2":2,
		"Port1":1,
		"Port2":2,
		"Port3":3,
		"Port4":4,
		"Port5":5,
		"Port6":6,
		"Port7":7,
		"Port8":8,
		"Port9":9,
		"Port10":10,
		"Port11":11,
		"Port12":12,
		"Port8":8,
		"Port1A":1,
		"Port1B":9,
		"Port2A":2,
		"Port2B":10,
		"Port3A":3,
		"Port3B":11,
		"Port4A":4,
		"Port4B":12,
		"M9":1,
		"M10":2,
		"M11":3,
		"M12":4,
	"A6" :60,
    	"A7" :61,
    	"A8" :62,
    	"A9" :63,
    	"A10":64,
    	"A11":65,
    	"A12":66,
    	"A13":67,
    	"A14":68,
    	"A15":69,
		"X-Axis":1,
		"Y-Axis":2,
		"Z-Axis":3,
		"run":2,
		"get":1,
		"motor":10,
		"servo":11,
		"sevseg":9,
		"steppermotor":40,
		"encodermotor":41,
		"led":8,
		"lightsensor":3,
		"shutter":20,
		"ultrasonic":1,
		"linefollower":17,
		"joystick":5,
		"potentiometer":4,
		"soundsensor":7,
		"infrared":16,
		"limitswitch":21,
		"pirmotion":15,
		"temperature":2,
		"gyro":6,
		"time":0,
		"turns":1,
		"steps":1,
		"Address 1":0x70,
		"Address 2":0x71,
		"humidity":0,
		"temperature":1,
		"key1":1,
		"key2":2,
		"key3":3,
		"key4":4,
		"stop":0,
		"clockwise": 1,
		"counter-clockwise": -1,
		"R":0,
		"G":1,
		"B":2,
		"greyscale":3,
		"white":0,
		"pinke":1,
		"red":2,
		"orange":3,
		"yellow":4,
		"green":5,
		"cyan":6,
		"blue":7,
		"black":9,
		"gold":10,
		"M1 ":46,
		"M2 ":45,
		"M3 ":44,
		"M4 ":10,
		"M1":1,
		"M2":2,
		"LLL":0,
		"LLH":1,
		"LHL":2,
		"LHH":3,
		"HLL":4,
		"HLH":5,
		"HHL":6,
		"HHH":7
	},
	"translators":{
	}
 }
